// --- Variables ---
:host {
  // Keep your existing CSS variables
  --font-family: 'Georgia', serif;
  --text-color: #333;
  --background-color: #f9f9f9; // Reader background
  --main-bg-color: #fff; // App background
  --button-bg: #eee;
  --button-hover-bg: #ddd;
  --button-disabled-bg: #f5f5f5;
  --button-disabled-color: #aaa;
  --error-color: #d9534f;
  --slider-track-bg: #ddd;
  --slider-thumb-bg: #888;

  display: flex;
  flex-direction: column;
  height: 100vh; // Full viewport height
  width: 100%;
  box-sizing: border-box;
  background-color: var(--main-bg-color);
  overflow: hidden; // Host should not scroll
}

// --- Reader Container ---
.reader-container {
  font-family: var(--font-family);
  color: var(--text-color);
  background-color: var(--background-color);
  flex-grow: 1; // Take remaining vertical space
  display: flex;
  flex-direction: column;
  overflow: hidden; // Prevent this container from scrolling
  box-sizing: border-box;
  position: relative; // For potential absolute positioning inside
  height: 100%; // Ensure it fills parent if parent has height
}

// --- Loading & Error ---
.loading-indicator,
.error-message {
  text-align: center;
  padding: 40px 20px;
  font-style: italic;
  margin: auto; // Center vertically and horizontally
}

.error-message {
  color: var(--error-color);
  font-weight: bold;
}

// --- Reader Content Wrapper (Native Scroll Container) ---
.reader-content-wrapper {
  flex-grow: 1; // Take remaining space between header(if any) and controls
  overflow-y: auto; // Enable native vertical scrolling
  position: relative; // Good practice for scroll containers
  margin: 0 auto; // Center content horizontally if desired
  padding: 1rem 0; // Vertical padding inside the scroll area
  -webkit-overflow-scrolling: touch; // Enable momentum scrolling on iOS

  // Optional: Hide scrollbar visually
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */

  &::-webkit-scrollbar { /* Chrome, Safari, Opera */
    display: none;
  }
}

// --- Reader Content (Holds the Text Blocks) ---
.reader-content {
  font-size: 20px;
  line-height: 1.6;
  padding: 0 2rem;
  max-width: 800px;
  margin: 0 auto;

  ::ng-deep {
    pre {
      white-space: pre-wrap; // Preserves whitespace BUT allows wrapping
      overflow-wrap: break-word; // Ensures long words within pre also wrap
      word-wrap: break-word; // Fallback for overflow-wrap
    }

    p {
      margin-bottom: 0.8em;
      text-indent: 1.5em;

      &:first-child {
        text-indent: 0;
      }
    }

    .poem {
      margin-top: 1em;
      margin-bottom: 1em;
      font-family: 'Palatino Linotype', 'Book Antiqua', Palatino, serif;
      line-height: 1.4;
      white-space: pre-wrap;
      overflow-x: auto;
      text-indent: 0;
      margin-left: 10%;
      font-size: 90%;

      br {
        display: none;
      }
    }

    h2 {
      margin-top: 2em;
      margin-bottom: 1.2em;
      font-size: 1.5em;
      font-weight: bold;
      text-align: center;
      line-height: 1.3;
    }
  }

  // Overlay mode
  &.mode-overlay {
    ::ng-deep span.eng {
      cursor: help;
      transition: background-color 0.2s ease-out;
      border-radius: 4px;

      &:hover {
        background-color: #e7f3ff;
        text-decoration: underline;
        text-decoration-color: var(--info-dark-blue);
      }
    }
  }

  ::ng-deep span.ukr {
    color: white;
    background: #621567;
    border-radius: 12px;
    padding: 0.2rem 0.5rem;
    font-size: 0.95em;
    margin: 0 0.3em;
    display: inline;

    &[hidden] {
      display: none !important;
    }

    &:not([hidden])::before {
      margin-right: 0.1em;
    }

    &:not([hidden])::after {
      margin-left: 0.1em;
    }
  }

  // Side-by-side mode
  &.mode-side {
    max-width: unset;

    ::ng-deep {
      .sbs-block-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
        align-items: start;
        width: 100%;
      }

      .sbs-column {
        word-wrap: break-word;
        overflow-wrap: break-word;
        min-height: 1em;
      }

      .sbs-eng-column {
        grid-column: 1;
      }

      .sbs-ukr-column {
        grid-column: 2;
      }

      .sbs-segment {
        display: inline;
        margin-right: 0.2em;
        line-height: inherit;
        border-radius: 3px;
        padding: 1px 3px;
      }

      .sbs-segment.sbs-color-1 {
        background-color: #f0f8ff;
      }

      .sbs-segment.sbs-color-2 {
        background-color: #fff0f5;
      }

      .sbs-segment.sbs-color-3 {
        background-color: #f5fffa;
      }

      .sbs-segment.sbs-color-4 {
        background-color: #fafad2;
      }

      p,
      h2,
      div.poem {
        margin-bottom: 1em;
      }

      h2 .sbs-block-container {
        text-align: center;

        .sbs-column {
          text-align: center;
        }
      }

      span.eng,
      span.ukr {
        display: none !important;
      }
    }
  }
}

// --- Pagination/Navigation Controls ---
.pagination-controls {
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  border-top: 1px solid #eee;
  background-color: var(--background-color);
  user-select: none;
  padding: 0 .5rem;
  min-height: 3rem;
}

.pagination-center-area {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  min-width: 250px;
}

.slider-chapter-area {
  display: flex;
  align-items: center;
  gap: .1rem;
  flex-grow: 1;
  justify-content: center;
  min-width: 0;
}

.page-slider {
  flex-grow: 1;
  max-width: 300px;
  min-width: 100px;
  cursor: pointer;
}

.pagination-info {
  font-size: 14px;
  color: #666;
  white-space: nowrap;
  text-align: right;
  min-width: 2.5rem;
}

.chapter-select {
  padding: 4px 8px;
  font-size: 13px;
  border-radius: 4px;
  border: 1px solid #ccc;
  background-color: var(--button-bg);
  max-width: 150px;
  cursor: pointer;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.parallel {
  display: flex;
  align-items: center;
  gap: 0.5rem;

  tui-select {
    width: 6rem;
  }
}

.icon {
  cursor: pointer;
}
